train_set$sale_price <- as.integer(train_set$sale_price)
# summarize sale prices
summary(train_set$sale_price)
# remove rows with missing sale_price data
train_set <- train_set %>% drop_na(sale_price)
# remove $0 houses (ownership transfers)
train_set <- train_set[!train_set$sale_price == 0]
# summarize sale prices
summary(train_set$sale_price)
# remove cheap houses
train_set <- train_set[!train_set$sale_price <= 1000]
# sale price histogram
hist(train_set$sale_price)
# quantiles
quant_01 = quantile(train_set$sale_price, 0.01)
quant_99 = quantile(train_set$sale_price, 0.99)
train_set <- train_set[train_set$sale_price > quant_01 & train_set$sale_price < quant_99]
summary(train_set$sale_price)
# calculate skewness
skewness(train_set$sale_price)
# log normal sale price
train_set$log_sale_price <- log(train_set$sale_price)
# histogram of log normal sale price
hist(train_set$log_sale_price)
# calculate skewness
skewness(train_set$log_sale_price)
qqnorm(train_set$log_sale_price)
qqline(train_set$log_sale_price)
# remove sale price
train_set <- select(train_set, -c("sale_price"))
# view data head
head(train_set)
# statistical summary
summary(train_set)
# change column names
names(train_set)[names(train_set) == "tax_class_as_of_final_roll_18/19"] <- "tax_class"
names(train_set)[names(train_set) == "building_class_as_of_final_roll_18/19"] <- "building_class"
# remove unwanted characters
train_set$residential_units <- str_replace_all(train_set$residential_units, ",", "")
train_set$commercial_units <- str_replace_all(train_set$commercial_units, ",", "")
train_set$total_units <- str_replace_all(train_set$total_units, ",", "")
train_set$land_square_feet <- str_replace_all(train_set$land_square_feet, ",", "")
train_set$gross_square_feet <- str_replace_all(train_set$gross_square_feet, ",", "")
# change column data types
train_set$residential_units <- as.integer(train_set$residential_units)
train_set$commercial_units <- as.integer(train_set$commercial_units)
train_set$total_units <- as.integer(train_set$total_units)
train_set$land_square_feet <- as.integer(train_set$land_square_feet)
train_set$gross_square_feet <- as.integer(train_set$gross_square_feet)
train_set$sale_date <- as.Date(train_set$sale_date)
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove ease-ment column
train_set <- select(train_set, -c("ease-ment"))
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing zip_code data
train_set <- train_set %>% drop_na(zip_code)
# if tot is empty replace with res + com
train_set$total_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] <- train_set$residential_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] + train_set$commercial_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)]
# if res is empty replace with tot - com
train_set$residential_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)] <- train_set$total_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)] - train_set$commercial_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)]
# if com is empty replace with tot - res
train_set$commercial_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)] <- train_set$total_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)] - train_set$residential_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)]
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create 1x4 figure
par(mfrow=c(1,4))
# residential unit histograms
hist(train_set$residential_units[train_set$building_class == "A4"],
main = "Building Class: A4",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "V0"],
main = "Building Class: V0",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "B9"],
main = "Building Class: B9",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "R3"],
main = "Building Class: R3",
xlab = "Residential Units")
# create 1x4 figure
par(mfrow=c(1,4))
# commercial unit histograms
hist(train_set$commercial_units[train_set$building_class == "D1"],
main = "Building Class: D1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "I1"],
main = "Building Class: I1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "N9"],
main = "Building Class: N9",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "Y3"],
main = "Building Class: Y3",
xlab = "Commercial Units")
# create 1x4 figure
par(mfrow=c(1,4))
# commercial unit histograms
hist(train_set$commercial_units[train_set$building_class == "D1"],
main = "Building Class: D1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "I1"],
main = "Building Class: I1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "N9"],
main = "Building Class: N9",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "P2"],
main = "Building Class: Y3",
xlab = "Commercial Units")
# imports
require(ggplot2)
require(stringr)
require(caret)
require(plyr)
require(data.table)
require(dplyr)
require(tidyr)
require(tidyverse)
require(mltools)
require(lubridate)
require(reshape2)
require(e1071)
require(Metrics)
require(car)
# alter plot size
knitr::opts_chunk$set(fig.width=20, fig.height=8)
# import data
filenames <- list.files("Assignment1-dataset", pattern="*.csv", full.names = TRUE)
ldf <- lapply(filenames, read.csv, fileEncoding="UTF-8-BOM", check.names = FALSE)
names(ldf) <- str_replace_all(basename(filenames), ".csv", "")
# combine dataframes
df <- rbindlist(ldf)
# remove \n from column names
colnames(df) <- str_replace_all(colnames(df), "\n", "")
colnames(df) <- str_replace_all(colnames(df), " ", "_")
colnames(df) <- tolower(colnames(df))
colnames(df)
# get training and testing data
# choose buroughs 1 and 2 for testing
test_boroughs = df[df$borough == 1 | df$borough == 2, ]
test_size <- floor(0.1 * nrow(test_boroughs))
test_ind <- sample(seq_len(nrow(test_boroughs)), size = test_size)
test_set <- test_boroughs[test_ind, ]
train_set <- df[-test_ind, ]
# summarize sale prices
summary(train_set$sale_price)
# remove unwanted characters
train_set$sale_price <- str_replace_all(train_set$sale_price, ",", "")
train_set$sale_price <- str_replace_all(train_set$sale_price, "[$]", "")
# change data type to integer
train_set$sale_price <- as.integer(train_set$sale_price)
# summarize sale prices
summary(train_set$sale_price)
# remove rows with missing sale_price data
train_set <- train_set %>% drop_na(sale_price)
# remove $0 houses (ownership transfers)
train_set <- train_set[!train_set$sale_price == 0]
# summarize sale prices
summary(train_set$sale_price)
# remove cheap houses
train_set <- train_set[!train_set$sale_price <= 1000]
# sale price histogram
hist(train_set$sale_price)
# quantiles
quant_01 = quantile(train_set$sale_price, 0.01)
quant_99 = quantile(train_set$sale_price, 0.99)
train_set <- train_set[train_set$sale_price > quant_01 & train_set$sale_price < quant_99]
summary(train_set$sale_price)
# calculate skewness
skewness(train_set$sale_price)
# log normal sale price
train_set$log_sale_price <- log(train_set$sale_price)
# histogram of log normal sale price
hist(train_set$log_sale_price)
# calculate skewness
skewness(train_set$log_sale_price)
qqnorm(train_set$log_sale_price)
qqline(train_set$log_sale_price)
# remove sale price
train_set <- select(train_set, -c("sale_price"))
# view data head
head(train_set)
# statistical summary
summary(train_set)
# change column names
names(train_set)[names(train_set) == "tax_class_as_of_final_roll_18/19"] <- "tax_class"
names(train_set)[names(train_set) == "building_class_as_of_final_roll_18/19"] <- "building_class"
# remove unwanted characters
train_set$residential_units <- str_replace_all(train_set$residential_units, ",", "")
train_set$commercial_units <- str_replace_all(train_set$commercial_units, ",", "")
train_set$total_units <- str_replace_all(train_set$total_units, ",", "")
train_set$land_square_feet <- str_replace_all(train_set$land_square_feet, ",", "")
train_set$gross_square_feet <- str_replace_all(train_set$gross_square_feet, ",", "")
# change column data types
train_set$residential_units <- as.integer(train_set$residential_units)
train_set$commercial_units <- as.integer(train_set$commercial_units)
train_set$total_units <- as.integer(train_set$total_units)
train_set$land_square_feet <- as.integer(train_set$land_square_feet)
train_set$gross_square_feet <- as.integer(train_set$gross_square_feet)
train_set$sale_date <- as.Date(train_set$sale_date)
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove ease-ment column
train_set <- select(train_set, -c("ease-ment"))
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing zip_code data
train_set <- train_set %>% drop_na(zip_code)
# if tot is empty replace with res + com
train_set$total_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] <- train_set$residential_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] + train_set$commercial_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)]
# if res is empty replace with tot - com
train_set$residential_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)] <- train_set$total_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)] - train_set$commercial_units[is.na(train_set$residential_units) & !is.na(train_set$total_units) & !is.na(train_set$commercial_units)]
# if com is empty replace with tot - res
train_set$commercial_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)] <- train_set$total_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)] - train_set$residential_units[is.na(train_set$commercial_units) & !is.na(train_set$total_units) & !is.na(train_set$residential_units)]
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create 1x4 figure
par(mfrow=c(1,4))
# residential unit histograms
hist(train_set$residential_units[train_set$building_class == "A4"],
main = "Building Class: A4",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "V0"],
main = "Building Class: V0",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "B9"],
main = "Building Class: B9",
xlab = "Residential Units")
hist(train_set$residential_units[train_set$building_class == "R3"],
main = "Building Class: R3",
xlab = "Residential Units")
# create 1x4 figure
par(mfrow=c(1,4))
# commercial unit histograms
hist(train_set$commercial_units[train_set$building_class == "D1"],
main = "Building Class: D1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "I1"],
main = "Building Class: I1",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "N9"],
main = "Building Class: N9",
xlab = "Commercial Units")
hist(train_set$commercial_units[train_set$building_class == "P2"],
main = "Building Class: P2",
xlab = "Commercial Units")
# create mean function
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
# replace missing values with rounded mean
train_set[, residential_units := round(impute.mean(residential_units)), by = building_class][,
commercial_units := round(impute.mean(commercial_units)), by = building_class]
# if tot is empty replace with res + com
train_set$total_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] <- train_set$residential_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)] + train_set$commercial_units[is.na(train_set$total_units) & !is.na(train_set$residential_units) & !is.na(train_set$commercial_units)]
# create 1x4 figure
par(mfrow=c(1,4))
# land square feet histograms
hist(train_set$land_square_feet[train_set$building_class == "RK"],
main = "Building Class: RK",
xlab = "Land Square Feet")
hist(train_set$land_square_feet[train_set$building_class == "D0"],
main = "Building Class: D0",
xlab = "Land Square Feet")
hist(train_set$land_square_feet[train_set$building_class == "W3"],
main = "Building Class: W3",
xlab = "Land Square Feet")
hist(train_set$land_square_feet[train_set$building_class == "L1"],
main = "Building Class: L1",
xlab = "Land Square Feet")
# create 1x4 figure
par(mfrow=c(1,4))
# gross square feet histograms
hist(train_set$gross_square_feet[train_set$building_class == "N1"],
main = "Building Class: N1",
xlab = "Gross Square Feet")
hist(train_set$gross_square_feet[train_set$building_class == "Z2"],
main = "Building Class: Z2",
xlab = "Gross Square Feet")
hist(train_set$gross_square_feet[train_set$building_class == "P7"],
main = "Building Class: B9",
xlab = "Gross Square Feet")
hist(train_set$gross_square_feet[train_set$building_class == "A7"],
main = "Building Class: R3",
xlab = "Gross Square Feet")
# replace missing values with rounded mean
train_set[, land_square_feet := round(impute.mean(land_square_feet)), by = building_class][,
gross_square_feet := round(impute.mean(gross_square_feet)), by = building_class]
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing building class data
train_set <- train_set[!train_set$building_class == ""]
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# replace missing values with rounded mean
train_set[, year_built := round(impute.mean(year_built)), by = neighborhood]
# count missing values
na_count <-sapply(train_set, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove last row with missing value
train_set <- na.omit(train_set)
# plot selected columns vs sale price
plot(train_set$block, train_set$log_sale_price)
plot(train_set$lot, train_set$log_sale_price)
plot(train_set$apartment_number, train_set$log_sale_price)
# remove selected columns
train_set <- select(train_set, -c("block", "lot", "apartment_number", "address"))
# remove selected columns
train_set <- select(train_set, -c("building_class_category", "building_class_at_time_of_sale", "tax_class_at_time_of_sale"))
# remove selected columns
train_set <- select(train_set, -c("total_units"))
# remove selected columns
train_set <- select(train_set, -c("zip_code"))
# boxplot of data by sale price grouped by borough
boxplot(log_sale_price ~ borough, data = train_set)
# most common neighborhoods in the data by sale price
common_neighborhoods <- sort(table(train_set$neighborhood),decreasing=TRUE)[1:10]
# boxplot most common neighborhoods
boxplot(log_sale_price ~ neighborhood, data = train_set[train_set$neighborhood %in% names(common_neighborhoods)])
# most common tax classes in the data by sale price
common_tax_classes <- sort(table(train_set$tax_class),decreasing=TRUE)[1:10]
# boxplot most common tax classes
boxplot(log_sale_price ~ tax_class, data = train_set[train_set$tax_class %in% names(common_tax_classes)])
# most common building classes in the data by sale price
common_building_classes <- sort(table(train_set$building_class),decreasing=TRUE)[1:10]
# boxplot most common building classes
boxplot(log_sale_price ~ building_class, data = train_set[train_set$building_class %in% names(common_building_classes)])
# most common number of residential units in the data by sale price
common_res_units <- sort(table(train_set$residential_units),decreasing=TRUE)[1:10]
# boxplot most common number of residential units classes
boxplot(log_sale_price ~ residential_units, data = train_set[train_set$residential_units %in% names(common_res_units)])
# most common number of commercial units in the data by sale price
common_com_units <- sort(table(train_set$commercial_units),decreasing=TRUE)[1:10]
# boxplot most common number of commercial units
boxplot(log_sale_price ~ commercial_units, data = train_set[train_set$commercial_units %in% names(common_com_units)])
# most common land square footage in the data by sale price
common_land_sqft <- sort(table(train_set$land_square_feet),decreasing=TRUE)[1:10]
# boxplot most common land square footage
boxplot(log_sale_price ~ land_square_feet, data = train_set[train_set$land_square_feet %in% names(common_land_sqft)])
# remove selected columns
train_set <- select(train_set, -c("land_square_feet"))
# most common gross square footage in the data by sale price
common_gross_sqft <- sort(table(train_set$gross_square_feet),decreasing=TRUE)[1:10]
# boxplot most common gross square footage
boxplot(log_sale_price ~ gross_square_feet, data = train_set[train_set$gross_square_feet %in% names(common_gross_sqft)])
# most common build year in the data by sale price
common_year <- sort(table(train_set$year_built),decreasing=TRUE)[1:30]
# boxplot most common build year
boxplot(log_sale_price ~ year_built, data = train_set[train_set$year_built %in% names(common_year)])
# create sale_year and sale_month column
train_set <- train_set %>%
mutate(sale_year = year(sale_date),
sale_month = month(sale_date))
# remove original column
train_set <- select(train_set, -c("sale_date"))
# one hot encode borough
train_set$borough <- as.character(train_set$borough)
dmy <- dummyVars(" ~ borough", data = train_set)
ohe_borough <- data.frame(predict(dmy, newdata = train_set))
# one hot encode neighborhood
train_set$neighborhood <- as.character(train_set$neighborhood)
dmy <- dummyVars(" ~ neighborhood", data = train_set)
ohe_neighborhood <- data.frame(predict(dmy, newdata = train_set))
# one hot encode building_class
train_set$building_class <- as.character(train_set$building_class)
dmy <- dummyVars(" ~ building_class", data = train_set)
ohe_building_class <- data.frame(predict(dmy, newdata = train_set))
# one hot encode tax_class
train_set$tax_class <- as.character(train_set$tax_class)
dmy <- dummyVars(" ~ tax_class", data = train_set)
ohe_tax_class <- data.frame(predict(dmy, newdata = train_set))
# remove original columns from dataset
train_set <- select(train_set, -c("borough", "neighborhood", "building_class", "tax_class"))
# add one hot encoded columns
train_set <- cbind(train_set, ohe_borough, ohe_neighborhood, ohe_building_class, ohe_tax_class)
# correlation matrix
res <- cor(train_set)
correlation_matrix <- round(res,2)
correlation_matrix <- data.frame(correlation_matrix)
correlation_matrix[rowSums(correlation_matrix >= 0.8 & correlation_matrix < 1) != 0, , drop = FALSE]
# remove unwanted characters
test_set$sale_price <- str_replace_all(test_set$sale_price, ",", "")
test_set$sale_price <- str_replace_all(test_set$sale_price, "[$]", "")
# change data type to integer
test_set$sale_price <- as.integer(test_set$sale_price)
# remove rows with missing sale_price data
test_set <- test_set %>% drop_na(sale_price)
# remove $0 houses (ownership transfers)
test_set <- test_set[!test_set$sale_price == 0]
# log normal sale price
test_set$log_sale_price <- log(test_set$sale_price)
# remove sale price
test_set <- select(test_set, -c("sale_price"))
# change column names
names(test_set)[names(test_set) == "tax_class_as_of_final_roll_18/19"] <- "tax_class"
names(test_set)[names(test_set) == "building_class_as_of_final_roll_18/19"] <- "building_class"
# remove unwanted characters
test_set$residential_units <- str_replace_all(test_set$residential_units, ",", "")
test_set$commercial_units <- str_replace_all(test_set$commercial_units, ",", "")
test_set$total_units <- str_replace_all(test_set$total_units, ",", "")
test_set$land_square_feet <- str_replace_all(test_set$land_square_feet, ",", "")
test_set$gross_square_feet <- str_replace_all(test_set$gross_square_feet, ",", "")
# change column data types
test_set$residential_units <- as.integer(test_set$residential_units)
test_set$commercial_units <- as.integer(test_set$commercial_units)
test_set$total_units <- as.integer(test_set$total_units)
test_set$land_square_feet <- as.integer(test_set$land_square_feet)
test_set$gross_square_feet <- as.integer(test_set$gross_square_feet)
test_set$sale_date <- as.Date(test_set$sale_date)
# remove ease-ment column
test_set <- select(test_set, -c("ease-ment"))
# remove rows with missing zip_code data
test_set <- test_set %>% drop_na(zip_code)
# if tot is empty replace with res + com
test_set$total_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)] <- test_set$residential_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)] + test_set$commercial_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)]
# if res is empty replace with tot - com
test_set$residential_units[is.na(test_set$residential_units) & !is.na(test_set$total_units) & !is.na(test_set$commercial_units)] <- test_set$total_units[is.na(test_set$residential_units) & !is.na(test_set$total_units) & !is.na(test_set$commercial_units)] - test_set$commercial_units[is.na(test_set$residential_units) & !is.na(test_set$total_units) & !is.na(test_set$commercial_units)]
# if com is empty replace with tot - res
test_set$commercial_units[is.na(test_set$commercial_units) & !is.na(test_set$total_units) & !is.na(test_set$residential_units)] <- test_set$total_units[is.na(test_set$commercial_units) & !is.na(test_set$total_units) & !is.na(test_set$residential_units)] - test_set$residential_units[is.na(test_set$commercial_units) & !is.na(test_set$total_units) & !is.na(test_set$residential_units)]
# create mean function
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
# replace missing values with rounded mean
test_set[, residential_units := round(impute.mean(residential_units)), by = building_class][,
commercial_units := round(impute.mean(commercial_units)), by = building_class]
# if tot is empty replace with res + com
test_set$total_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)] <- test_set$residential_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)] + test_set$commercial_units[is.na(test_set$total_units) & !is.na(test_set$residential_units) & !is.na(test_set$commercial_units)]
# replace missing values with rounded mean
test_set[, land_square_feet := round(impute.mean(land_square_feet)), by = building_class][,
gross_square_feet := round(impute.mean(gross_square_feet)), by = building_class]
# remove rows with missing building class data
test_set <- test_set[!test_set$building_class == ""]
# replace missing values with rounded mean
test_set[, year_built := round(impute.mean(year_built)), by = neighborhood]
# remove last rows with missing value
test_set <- na.omit(test_set)
# remove selected columns
test_set <- select(test_set, -c("block", "lot", "apartment_number", "address"))
# remove selected columns
test_set <- select(test_set, -c("building_class_category", "building_class_at_time_of_sale", "tax_class_at_time_of_sale"))
# remove selected columns
test_set <- select(test_set, -c("total_units"))
# remove selected columns
test_set <- select(test_set, -c("zip_code"))
# remove selected columns
test_set <- select(test_set, -c("land_square_feet"))
# create sale_year and sale_month column
test_set <- test_set %>%
mutate(sale_year = year(sale_date),
sale_month = month(sale_date))
# remove original column
test_set <- select(test_set, -c("sale_date"))
# one hot encode borough
test_set$borough <- as.character(test_set$borough)
dmy <- dummyVars(" ~ borough", data = test_set)
ohe_borough <- data.frame(predict(dmy, newdata = test_set))
# one hot encode neighborhood
test_set$neighborhood <- as.character(test_set$neighborhood)
dmy <- dummyVars(" ~ neighborhood", data = test_set)
ohe_neighborhood <- data.frame(predict(dmy, newdata = test_set))
# one hot encode building_class
test_set$building_class <- as.character(test_set$building_class)
dmy <- dummyVars(" ~ building_class", data = test_set)
ohe_building_class <- data.frame(predict(dmy, newdata = test_set))
# one hot encode tax_class
test_set$tax_class <- as.character(test_set$tax_class)
dmy <- dummyVars(" ~ tax_class", data = test_set)
ohe_tax_class <- data.frame(predict(dmy, newdata = test_set))
# remove original columns from dataset
test_set <- select(test_set, -c("borough", "neighborhood", "building_class", "tax_class"))
# add one hot encoded columns
test_set <- cbind(test_set, ohe_borough, ohe_neighborhood, ohe_building_class, ohe_tax_class)
# find intersecting columns
cols_to_keep <- c(intersect(colnames(train_set), colnames(test_set)))
# remove columns which do not intersect
train_set <- select(train_set, cols_to_keep)
test_set <- select(test_set, cols_to_keep)
test_set_log_sale_prices <- test_set$log_sale_price
test_set <- select(test_set, -c("log_sale_price"))
# create  linear model
model_v1 = lm(formula = log_sale_price ~ ., data = train_set)
summary(model_v1)
model_v1_predictions <- predict(model_v1, newdata = test_set)
rmse(test_set_log_sale_prices, model_v1_predictions)
# residual plots
par(mfrow = c(2,2))
plot(model_v1)
model_v2 = glm(formula = log_sale_price ~ 1 + .,
data = train_set,
family = gaussian(link = "identity"))
summary(model_v2)
model_v2_predictions <- model_v2 %>% predict(test_set)
RMSE(test_set_log_sale_prices, model_v2_predictions)
# residual plots
par(mfrow = c(2,2))
plot(model_v2)
