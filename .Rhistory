na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing sale_price data
df <- df %>% drop_na(sale_price)
# remove ease-ment column
df <- select(df, -c("ease-ment"))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing zip_code data
df <- df %>% drop_na(zip_code)
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
# if res is empty replace with tot - com
df$residential_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)] <- df$total_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)] - df$commercial_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)]
# if com is empty replace with tot - res
df$commercial_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)] <- df$total_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)] - df$residential_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create 1x4 figure
par(mfrow=c(1,4))
# residential unit histograms
hist(df$residential_units[df$building_class == "A4"],
main = "Building Class: A4",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "V0"],
main = "Building Class: V0",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "B9"],
main = "Building Class: B9",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "R3"],
main = "Building Class: R3",
xlab = "Residential Units")
# create 1x4 figure
par(mfrow=c(1,4))
# commercial unit histograms
hist(df$commercial_units[df$building_class == "D1"],
main = "Building Class: D1",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "I1"],
main = "Building Class: I1",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "N9"],
main = "Building Class: N9",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "Y3"],
main = "Building Class: Y3",
xlab = "Commercial Units")
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
impute.mode <- function(x) replace(x, is.na(x), getmode(x))
df <- df %>%
group_by(building_class) %>%
mutate(residential_units = impute.mode(residential_units),
commercial_units = impute.mode(commercial_units))
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create 1x4 figure
par(mfrow=c(1,4))
# land square feet histograms
hist(df$land_square_feet[df$building_class == "RK"],
main = "Building Class: RK",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "D0"],
main = "Building Class: D0",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "W3"],
main = "Building Class: W3",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "L1"],
main = "Building Class: L1",
xlab = "Land Square Feet")
# create 1x4 figure
par(mfrow=c(1,4))
# gross square feet histograms
hist(df$gross_square_feet[df$building_class == "N1"],
main = "Building Class: N1",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "Z2"],
main = "Building Class: Z2",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "P7"],
main = "Building Class: B9",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "A7"],
main = "Building Class: R3",
xlab = "Gross Square Feet")
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = impute.mean(land_square_feet),
gross_square_feet = impute.mean(gross_square_feet))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# data exploration
hist(df$sale_price)
# get training and testing data
# choose buroughs 1 and 2 for testing
test_boroughs = df[df$borough == 1 | df$borough == 2, ]
test_size <- floor(0.1 * nrow(test_boroughs))
test_ind <- sample(seq_len(nrow(test_boroughs)), size = test_size)
test_set <- test_boroughs[test_ind, ]
train_set <- df[-test_ind, ]
df <- df %>%
group_by(building_class) %>%
mutate(residential_units = impute.mode(residential_units),
commercial_units = impute.mode(commercial_units))
```{r}
na_count
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = impute.mean(land_square_feet),
gross_square_feet = impute.mean(gross_square_feet))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = impute.mean(land_square_feet),
gross_square_feet = impute.mean(gross_square_feet))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
getmode(df$residential_units)
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = impute.mean(land_square_feet),
gross_square_feet = impute.mean(gross_square_feet))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# imports
require(ggplot2)
require(stringr)
require(caret)
require(plyr)
require(data.table)
require(dplyr)
require(tidyr)
require(tidyverse)
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = impute.mean(land_square_feet),
gross_square_feet = impute.mean(gross_square_feet))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class) %>%
mutate(land_square_feet = round(impute.mean(land_square_feet)),
gross_square_feet = round(impute.mean(gross_square_feet)))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# impute missing residential_units and commercial_units data with mean
impute.mean <- function(x) replace(x, is.na(x), mean(x, rm.na = TRUE))
df <- df %>%
group_by(building_class_category) %>%
mutate(land_square_feet = round(impute.mean(land_square_feet)),
gross_square_feet = round(impute.mean(gross_square_feet)))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
impute.mode <- function(x) replace(x, is.na(x), getmode(x))
df <- df %>%
group_by(building_class) %>%
mutate(residential_units = impute.mode(residential_units),
commercial_units = impute.mode(commercial_units))
na_count <- data.frame(na_count)
na_count
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
impute.mode <- function(x) replace(x, is.na(x), getmode(x))
df <- ddply(df, ~ building_class, transform, residential_units = impute.mode(residential_units))
df <- ddply(df, ~ building_class, transform, commercial_units = impute.mode(commercial_units))
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
getmode(df$residential_units)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
impute.mode <- function(x) replace(x, is.na(x), getmode(x))
df <- ddply(df, ~ building_class, transform, residential_units = impute.mode(residential_units))
df <- ddply(df, ~ building_class, transform, commercial_units = impute.mode(commercial_units))
# if tot is empty replace with res + com
#df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
getmode(df$residential_units)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
impute.mode <- function(x) replace(x, is.na(x), getmode(x))
df <- ddply(df, ~ building_class, transform, residential_units = impute.mean(residential_units))
df <- ddply(df, ~ building_class, transform, commercial_units = impute.mean(commercial_units))
# if tot is empty replace with res + com
#df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
getmode(df$residential_units)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create mode function
getmode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
# impute missing residential_units and commercial_units data with mode
for (i in which(sapply(df, is.numeric))) {
for (j in which(is.na(df[, i]))) {
df[j, i] <- getmode(df[df[, "building_class"] == df[j, "building_class"], i],  na.rm = TRUE)
}
}
library(plyr)
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
library(data.table)
setDT(dat)
library(plyr)
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
library(data.table)
setDT(df)
df[, residential_units := impute.mean(residential_units), by = building_class][,
commercial_units := impute.mean(commercial_units), by = building_class]
# if tot is empty replace with res + com
#df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
getmode(df$residential_units)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
df[is.na(df$residential_units)]
# create mean function
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
df[, residential_units := round(impute.mean(residential_units)), by = building_class][,
commercial_units := round(impute.mean(commercial_units)), by = building_class]
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
getmode(df$residential_units)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# replace missing values with rounded mean
df[, land_square_feet := round(impute.mean(land_square_feet)), by = building_class][,
gross_square_feet := round(impute.mean(gross_square_feet)), by = building_class]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
df[is.na(df$residential_units)]
df[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"]
unique(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"])
hist(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"])
hist(count(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"]))
df[is.na(df$residential_units)]
hist(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"]))
df[is.na(df$residential_units)]
hist(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"]))
df[is.na(df$residential_units)]
hist(df$building_class[df$building_class_category == "13 CONDOS - ELEVATOR APARTMENTS"])
# remove rows with missing building class data
df <- df[!df$building_class == ""]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# imports
require(ggplot2)
require(stringr)
require(caret)
require(plyr)
require(data.table)
require(dplyr)
require(tidyr)
require(tidyverse)
# alter plot size
knitr::opts_chunk$set(fig.width=20, fig.height=8)
# import data
filenames <- list.files("Assignment1-dataset", pattern="*.csv", full.names = TRUE)
ldf <- lapply(filenames, read.csv, fileEncoding="UTF-8-BOM", check.names = FALSE)
names(ldf) <- str_replace_all(basename(filenames), ".csv", "")
# combine dataframes
df <- rbindlist(ldf)
# remove \n from column names
colnames(df) <- str_replace_all(colnames(df), "\n", "")
colnames(df) <- str_replace_all(colnames(df), " ", "_")
colnames(df) <- tolower(colnames(df))
colnames(df)
# view data head
head(df)
# statistical summary
summary(df)
# change column names
names(df)[names(df) == "tax_class_as_of_final_roll_18/19"] <- "tax_class"
names(df)[names(df) == "building_class_as_of_final_roll_18/19"] <- "building_class"
# remove unwanted characters
df$residential_units <- str_replace_all(df$residential_units, ",", "")
df$commercial_units <- str_replace_all(df$commercial_units, ",", "")
df$total_units <- str_replace_all(df$total_units, ",", "")
df$land_square_feet <- str_replace_all(df$land_square_feet, ",", "")
df$gross_square_feet <- str_replace_all(df$gross_square_feet, ",", "")
df$sale_price <- str_replace_all(df$sale_price, ",", "")
df$sale_price <- str_replace_all(df$sale_price, "[$]", "")
# change column data types
df$residential_units <- as.integer(df$residential_units)
df$commercial_units <- as.integer(df$commercial_units)
df$total_units <- as.integer(df$total_units)
df$land_square_feet <- as.integer(df$land_square_feet)
df$gross_square_feet <- as.integer(df$gross_square_feet)
df$sale_price <- as.integer(df$sale_price)
df$sale_date <- as.Date(df$sale_date)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing sale_price data
df <- df %>% drop_na(sale_price)
# remove ease-ment column
df <- select(df, -c("ease-ment"))
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# remove rows with missing zip_code data
df <- df %>% drop_na(zip_code)
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
# if res is empty replace with tot - com
df$residential_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)] <- df$total_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)] - df$commercial_units[is.na(df$residential_units) & !is.na(df$total_units) & !is.na(df$commercial_units)]
# if com is empty replace with tot - res
df$commercial_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)] <- df$total_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)] - df$residential_units[is.na(df$commercial_units) & !is.na(df$total_units) & !is.na(df$residential_units)]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# create 1x4 figure
par(mfrow=c(1,4))
# residential unit histograms
hist(df$residential_units[df$building_class == "A4"],
main = "Building Class: A4",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "V0"],
main = "Building Class: V0",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "B9"],
main = "Building Class: B9",
xlab = "Residential Units")
hist(df$residential_units[df$building_class == "R3"],
main = "Building Class: R3",
xlab = "Residential Units")
# create 1x4 figure
par(mfrow=c(1,4))
# commercial unit histograms
hist(df$commercial_units[df$building_class == "D1"],
main = "Building Class: D1",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "I1"],
main = "Building Class: I1",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "N9"],
main = "Building Class: N9",
xlab = "Commercial Units")
hist(df$commercial_units[df$building_class == "Y3"],
main = "Building Class: Y3",
xlab = "Commercial Units")
# create mean function
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
# replace missing values with rounded mean
df[, residential_units := round(impute.mean(residential_units)), by = building_class][,
commercial_units := round(impute.mean(commercial_units)), by = building_class]
# if tot is empty replace with res + com
df$total_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] <- df$residential_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)] + df$commercial_units[is.na(df$total_units) & !is.na(df$residential_units) & !is.na(df$commercial_units)]
# create 1x4 figure
par(mfrow=c(1,4))
# land square feet histograms
hist(df$land_square_feet[df$building_class == "RK"],
main = "Building Class: RK",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "D0"],
main = "Building Class: D0",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "W3"],
main = "Building Class: W3",
xlab = "Land Square Feet")
hist(df$land_square_feet[df$building_class == "L1"],
main = "Building Class: L1",
xlab = "Land Square Feet")
# create 1x4 figure
par(mfrow=c(1,4))
# gross square feet histograms
hist(df$gross_square_feet[df$building_class == "N1"],
main = "Building Class: N1",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "Z2"],
main = "Building Class: Z2",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "P7"],
main = "Building Class: B9",
xlab = "Gross Square Feet")
hist(df$gross_square_feet[df$building_class == "A7"],
main = "Building Class: R3",
xlab = "Gross Square Feet")
# replace missing values with rounded mean
df[, land_square_feet := round(impute.mean(land_square_feet)), by = building_class][,
gross_square_feet := round(impute.mean(gross_square_feet)), by = building_class]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
sum(df[df$building_class == ""])
sum(df[df$building_class == ""], )
sum(df[df$building_class == "", ])
sum(df[df$building_class == ""])
sum(df$building_class == "")
df[is.na(df$tax_class_at_time_of_sale)]
df[is.na(df$tax_class_at_time_of_sale)]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
df[is.na(df$year_built)]
# remove rows with missing building class data
df <- df[!df$building_class == ""]
na_count
# remove rows with missing building class data
df <- df[!df$building_class == ""]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
unique(df$neighborhood)
hist(df$year_built[df$neighborhood == "BAYCHESTER"])
hist(df$year_built[df$neighborhood == "BELMONT"])
hist(df$year_built[df$neighborhood == "BEACH"])
hist(df$year_built[df$neighborhood == "LAURELTON"])
hist(df$year_built[df$neighborhood == "BRONXDALE"])
hist(df$year_built[df$neighborhood == "WAKEFIELD"])
# replace missing values with rounded mean
df[, year_built := round(impute.mean(year_built)), by = neighborhood]
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
df[is.na(df$neighborhood)]
df[is.na(df$year_built)]
df <- na.omit(df)
# count missing values
na_count <-sapply(df, function(x) sum(length(which(is.na(x)))))
na_count <- data.frame(na_count)
na_count
# get training and testing data
# choose buroughs 1 and 2 for testing
test_boroughs = df[df$borough == 1 | df$borough == 2, ]
test_size <- floor(0.1 * nrow(test_boroughs))
test_ind <- sample(seq_len(nrow(test_boroughs)), size = test_size)
test_set <- test_boroughs[test_ind, ]
train_set <- df[-test_ind, ]
View(test_set)
View(train_set)
View(test_set)
